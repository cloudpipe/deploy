---
- name: install auth store TLS credentials
  template: src={{ item.from }} dest={{ item.to }} mode=0644
  with_items:
    - from: authstore-key.pem.j2
      to: "{{ docker_tls_path }}/authstore-key.pem"
    - from: authstore-cert.pem.j2
      to: "{{ docker_tls_path }}/authstore-cert.pem"
    - from: authstore-external-key.pem.j2
      to: "{{ docker_tls_path }}/external-key.pem"
    - from: authstore-external-cert.pem.j2
      to: "{{ docker_tls_path }}/external-cert.pem"

- name: Rackspace Auth Store
  docker:
    name: authstore
    image: "rackerlabs/cloudpipe-rackspace-auth-store"
    pull: always
    state: reloaded
    env:
      AUTH_LOGLEVEL: "{{ cloudpipe_log_level }}"
      AUTH_LOGCOLORS: "true"
      AUTH_INTERNALCACERT: "{{ docker_tls_path }}/ca.pem"
      AUTH_INTERNALCERT: "{{ docker_tls_path }}/authstore-cert.pem"
      AUTH_INTERNALKEY: "{{ docker_tls_path }}/authstore-key.pem"
      AUTH_EXTERNALCERT: "{{ docker_tls_path }}/external-cert.pem"
      AUTH_EXTERNALKEY: "{{ docker_tls_path }}/external-key.pem"
    volumes:
      - /var/run/docker.sock:/docker.sock
      - "{{ docker_tls_path }}:{{ docker_tls_path }}"
    expose:
    - "9001"
    ports:
    - "9000:9000"

- name: Cloudpipe API
  docker:
    name: cloudpipeapi
    image: cloudpipe/cloudpipe
    pull: always
    state: reloaded
    links:
      - authstore
    env:
      PIPE_ADMINNAME: "{{ cloudpipe_admin }}"
      PIPE_ADMINKEY: "{{ cloudpipe_admin_key }}"
      PIPE_LOGLEVEL: "{{ cloudpipe_log_level }}"
      PIPE_LOGCOLORS: true
      PIPE_CACERT: "{{ docker_tls_path }}/ca.pem"
      PIPE_CERT: "{{ docker_tls_path }}/cert.pem"
      PIPE_KEY: "{{ docker_tls_path }}/key.pem"
      PIPE_AUTHSERVICE: "{{ cloudpipe_auth_service_url }}"
      PIPE_MONGOURL: "{{ cloudpipe_mongo_backend_url }}"
    volumes:
      - /var/run/docker.sock:/docker.sock
      - "{{ docker_tls_path }}:{{ docker_tls_path }}"
    ports:
    - "8000:8000"
    restart_policy: always
